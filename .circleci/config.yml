# Clojure CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-clojure/ for more details
#
version: 2.1

executors:
    docker-publisher:
      working_directory: ~/french-tarot # directory where steps will run
      environment:
        IMAGE_NAME: mchughs/french-tarot-app
      docker:
        - image: circleci/buildpack-deps:stretch

jobs:
  build-js-css:
    docker:
      - image: theasp/clojurescript-nodejs:shadow-cljs-alpine
    
    working_directory: ~/french-tarot

    steps:
    - checkout

    - run:
        name: Build JS and CSS
        command: npm install && npm run shadow:release && npm run scss && npm run postcss:release

    - persist_to_workspace:
          root: ~/french-tarot
          paths:
              - resources/public/*

    - store_artifacts:
        path: resources/public/js/compiled/app.js
        destination: js

    - store_artifacts:
        path: resources/public/css
        destination: css

  build-jar:
    docker:
      - image: circleci/clojure:tools-deps-1.10.3.822

    working_directory: ~/french-tarot

    environment:
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m

    steps:
      - checkout

      # Grab the compiled files from the previous build step
      - attach_workspace:
          at: ./

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "deps.edn" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: Build Uberjar
          command: clojure -M:uberdeps

      - persist_to_workspace:
          root: ~/french-tarot
          paths:
              - target

      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "deps.edn" }}

      - run:
          name: Testing
          command: clojure -A:test

      - store_artifacts:
          path: target/french-tarot.jar
          destination: uberjar.jar

      - store_artifacts:
          path: target/coverage
          destination: coverage

      - store_test_results:
          path: target/coverage

  build-docker:
    executor: docker-publisher
    steps:
      - checkout
      - attach_workspace:
          at: .
      - setup_remote_docker
      - run:
          name: Build latest Docker image
          command: docker build . -t $IMAGE_NAME:latest
      - run:
          name: Build tagged Docker image
          command: |
            if [ "${CIRCLE_TAG}" ]; then
                docker build . -t $IMAGE_NAME:${CIRCLE_TAG};
            fi
      - run:
          name: Archive Docker image
          command: docker save -o image.tar $IMAGE_NAME
      - persist_to_workspace:
          root: ~/french-tarot
          paths:
            - ./image.tar

  publish-docker:
    executor: docker-publisher
    steps:
      - attach_workspace:
          at: .
      - setup_remote_docker
      - run:
          name: Load archived Docker image
          command: docker load -i image.tar
      - run:
          name: Publish Docker Image to Docker Hub
          command: |
            echo "${DOCKERHUB_PASS}" | docker login -u "${DOCKERHUB_USERNAME}" --password-stdin
            docker push $IMAGE_NAME:latest
            if [ "${CIRCLE_TAG}" ]; then
                docker push $IMAGE_NAME:${CIRCLE_TAG};
            fi

workflows:
  build:
    jobs:
      - build-js-css
      - build-jar:
          requires:
            - build-js-css
      - build-docker:
          requires:
            - build-jar
      - publish-docker:
          requires:
            - build-docker
